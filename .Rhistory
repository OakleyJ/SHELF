?wrap
GGally::ggpairs(data.frame(theta),
lower = list(continuous = GGally::wrap(GGally::ggally_points,
color = "red",
alpha = 0.1)))
library(SHELF)
?ggpairs
GGally::ggpairs(data.frame(theta),
lower = list(continuous = GGally::wrap(GGally::ggally_points,
color = "red",
alpha = 0.1)),
columnLabels = c(expression(X[1]),
expression(X[2]),
expression(X[3])))
library(SHELF)
x
x<-"  "
x
library(SHELF)
library(SHELF)
library(SHELF)
library(SHELF)
library(SHELF)
q()
library(SHELF)
?elicitQuadProb
p1 <- c(0.25, 0.5, 0.75)
v1 <- c(0.5, 0.55, 0.6)
v2 <- c(0.22, 0.3, 0.35)
myfit1 <- fitdist(v1, p1, 0, 1)
myfit2 <- fitdist(v2, p1, 0, 1)
elicitQuadProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
library(SHELF)
p1 <- c(0.25, 0.5, 0.75)
v1 <- c(0.5, 0.55, 0.6)
v2 <- c(0.22, 0.3, 0.35)
myfit1 <- fitdist(v1, p1, 0, 1)
myfit2 <- fitdist(v2, p1, 0, 1)
elicitQuadProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
elicitConcProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
elicitConcProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
library(SHELF)
elicitConcProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
library(SHELF)
elicitConcProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
library(SHELF)
elicitConcProb(myfit1, myfit2, 0.55, 0.3, d=c("Beta", "Beta"))
shinyRoulette()
library(SHELF)
roulette()
shinyRoulette()
library(SHELF)
shinyRoulette()
library(SHELF)
?compareIntervals
library(SHELF)
?plotfit
v <- matrix(c(30, 40, 50, 20, 25, 35), 3, 2)
p <- c(0.25, 0.5, 0.75)
myfit <- fitdist(vals = v, probs = p, lower = 0, upper = 100)
class(myfit)
class(myfit) <- "elicitation"
class(myfit)
q()
library(SHELF)
?fitdist
v <- c(20,30,50)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0)
class(myfit)
library(SHELF)
library(SHELF)
library(SHELF)
library(SHELF)
v <- matrix(c(20,30,50,55,60,70),3,2)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0, upper = 100)
library(SHELF)
v <- matrix(c(20,30,50,55,60,70),3,2)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0, upper = 100)
plotfit(myfit, xl =0, xu=100, d = "beta")
plotfit(myfit, xl =0, xu=100, d = "beta", ex = 1)
plotfit(myfit, xl =0, xu=100, d = "beta", ex = 1, ql = 0.025, qu = 0.975)
plotfit(myfit, xl =0, xu=100, d = "beta", lp = T)
plotfit(myfit, xl =0, xu=100, d = "beta", lp = T, lpw=c(10,1))
plotfit(myfit, xl =0, xu=100, d = "beta", lp = T, int = T)
v2 <- c(20, 30 , 50)
myfit2 <-fitdist(vals=v2, probs=p, lower=0, upper = 100)
plotfit(myfit2, ql =  0.025, qu = 0.975, d = "beta", xl = 0, xu =100)
plotfit(myfit2, int = T)
elicit()
v3 <-c(25, 50, 75)
myfit3 <-fitdist(vals=v3, probs=p, lower=0, upper = 100)
plotfit(myfit3, ql =  0.025, qu = 0.975, d = "gamma", xl = 0, xu = 100, int = T)
plotfit(myfit3, ql =  0.025, qu = 0.975, d = "beta")
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 18, lwd = 2)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 18, lwd = 1)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 12, lwd = 2)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 18, lwd = .5)
library(SHELF)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 18, lwd = .5)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "beta", fs = 18)
?shinyRoulette
library(SHELF)
library(SHELF)
x <- roulette()
x
roulette()
roulette(shiny = FALSE)
library(SHELF)
roulette()
library(SHELF)
?roulette
x <- roulette()
myfit <- fitdist(vals = x$v, probs = x$p)
plotfit(myfit)
myfit
library(SHELF)
x <- roulette(lower = 0, upper = 100)
fitdist(vals = x$v, probs = x$p)
?fitdist
fitdist(vals = x$v, probs = x$p, lower = 0, upper = 100)
print(myfit)
roulette()
library(SHELF)
library(SHELF)
library(SHELF)
devtools::build_vignettes()
library(SHELF)
?SHELF
v <-matrix(c(1, 0, 0 ,0, 10, 9.9,0,9.9,10),3,3)
v
chol(v)
chol(v, pivot = T)
v <-matrix(c(1, 0, 0 ,0, 10.1, 9.9,0,9.9,10),3,3)
v
v
3.162278^2
u<-chol(v, pivot = T)
u
t(u)
u%*% t(y)
u%*% t(u)
t(u) %*% u
t(u)
u
3.17805^2
u
v <-matrix(c(1, 0.1, 0.1 ,0.1, 10.1, 9.9,0.1,9.9,10),3,3)
v
chol(v, pivot = T)
v[2, -2]
v[2, -2, drop  = F]
v[-2, -2]  - v[-2, 2, drop  = F]
v[-2, 2, drop  = F]
v[-2, -2]  - v[-2, 2, drop  = F] %*% v[2, 2] %*% v[2, -2, drop  = F]
v[-2, -2]  - v[-2, 2] %*% v[2, 2] %*% v[2, -2, drop  = F]
v[-2, -2]  - v[-2, 2, drop  = F] %*% v[2, 2] %*% v[2, -2, drop  = F]
v[-2, -2]  - v[-2, 2, drop  = F] %*% solve(v[2, 2]) %*% v[2, -2, drop  = F]
v[3, -3]
v[3, 3] - v[3, -3, drop  = F] %*% solve(v[-3, -3]) %*% v[-3, 3, drop  = F]
u <- chol(v, pivot = T)
diag(u)^2
v <- matrix(c(20,30,50,55,60,70),3,2)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0, upper = 100)
plotfit(myfit, xl =0, xu=100, d = "beta")
plotfit(myfit, xl =0, xu=100, d = "gamma", fs = 18, lwd = 0.5)
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "normal", ex = 1)
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 1)
plotfit(myfit, xl =0, xu=100, d = "normal", ex = 1)
plotfit(myfit, xl =0, xu=100, d = "gamma", ex = 1)
qf(0.025, 16, 31)
qf(0.025, 16, 31)*(16*29)/31
qf(0.975, 16, 31)*(16*29)/31
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 5)
plotfit(myfit, xl =0, xu=100, d = "gamma", fs = 18, lwd = 0.5)
plotfit(myfit, xl =0, xu=100, d = "lognormal", fs = 12, lwd = 5, ex = 1)
choose(3, 2)
choose(4, 2)
getwd()
devtools::build_vignettes()
library(SHELF)
devtools::build_win()
q()
library(SHELF)
devtools::build_vignettes()
library(SHELF)
?elicitConcProb
?compareIntervals
library(SHELF)
devtools::build_win()
library(SHELF)
v <-matrix(c(1, 0.1, 0.1 ,0.1, 10.1, 9.9,0.1,9.9,10),3,3)
v
v[-2, -2]  - v[-2, 2, drop  = F] %*% solve(v[2, 2]) %*% v[2, -2, drop  = F]
v[3, 3] - v[3, -3, drop  = F] %*% solve(v[-3, -3]) %*% v[-3, 3, drop  = F]
u <- chol(v, pivot = T)
u
c(10.1, 0.999009901, 0.2960357 )^0.5
q()
library(SHELF)
?SHELF
devtools::build_win()
install.packages("SHELF")
citation("SHELF")
library(SHELF)
?SHELF
library(SHELF)
?SHELF
library(SHELF)
?SHELF
v <- matrix(c(30, 40, 50, 20, 25, 35), 3, 2)
p <- c(0.25, 0.5, 0.75)
myfit <- fitdist(vals = v, probs = p, lower = 0, upper = 100)
plotfit(myfit, int = T)
plotfit(myfit, int = T, lwd=2)
plotfit(myfit, int = T, lwd=5)
library(SHELF)
plotfit(myfit, int = T, lwd=5)
library(SHELF)
plotfit(myfit, int = T, lwd=5)
library(SHELF)
plotfit(myfit, int = T, lwd=5)
plotfit(myfit, int = T, lwd=2)
p <- c(1/3, 0.5, 2/3)
v <- matrix(c(12, 15, 20, 8, 10, 12, 27, 30, 35), 3, 3)
plotfit(individual.fits, int = T)
library(SHELF)
individual.fits <- fitdist(vals = v, probs = p, lower = 0)
plotfit(individual.fits, int = T)
individual.fits$ssq
fit <- individual.fits
ex <- 1
ssq <- fit$ssq[ex, 1 - is.na(fit$ssq[ex,])]
best.index <- which(ssq == min(ssq))[1]
best.index
index<-switch(which(d==c("normal", "t", "gamma", "lognormal", "logt","beta", "hist", "best")), 1, 2, 3, 4, 5, 6, 7, best.index)
d <- "best"
switch(which(d==c("normal", "t", "gamma", "lognormal", "logt","beta", "hist", "best")), 1, 2, 3, 4, 5, 6, 7, best.index)
ex<-2
ssq <- fit$ssq[ex, 1 - is.na(fit$ssq[ex,])]
best.index <- which(ssq == min(ssq))[1]
switch(which(d==c("normal", "t", "gamma", "lognormal", "logt","beta", "hist", "best")), 1, 2, 3, 4, 5, 6, 7, best.index)
individual.fits <- fitdist(vals = v, probs = p, lower = 0, upper = 1000)
plotfit(individual.fits, d = "best")
individual.fits <- fitdist(vals = v, probs = p, lower = 0, upper = 100)
plotfit(individual.fits, d = "best")
fit
?which.min
which.min(fit$ssq[1,])
ex <- 1
ssq <- fit$ssq[ex, 1 - is.na(fit$ssq[ex,])]
ssq
1 - is.na(fit$ssq[ex,])
x
x <- c(2,1,1,3)
which.min(x)
library(SHELF)
p <- c(1/3, 0.5, 2/3)
v <- matrix(c(12, 15, 20, 8, 10, 12, 27, 30, 35), 3, 3)
v
individual.fits <- fitdist(vals = v, probs = p, lower = 0)
plotfit(individual.fits)
plotfit(individual.fits, xu=75)
library(SHELF)
v <- matrix(c(20,30,50,55,60,70),3,2)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0, upper = 100)
plotfit(myfit, xl =0, xu=100, d = "beta", lp = T, int = T)
v2 <- c(20, 30 , 50)
myfit2 <-fitdist(vals=v2, probs=p, lower=0, upper = 100)
plotfit(myfit2, int = T)
elicit()
par(mar = c(1, 1, 1, 1), bg="violetred4")
circlize::chordDiagram(matrix(1, 20, 20),
col="white",
symmetric = TRUE,
transparency = 0.85,
annotationTrack = NULL)
install.packages("circlize")
par(mar = c(1, 1, 1, 1), bg="violetred4")
circlize::chordDiagram(matrix(1, 20, 20),
col="white",
symmetric = TRUE,
transparency = 0.85,
annotationTrack = NULL)
?chordDiagram
set.seed(123)
mat = matrix(sample(1:100, 18, replace = TRUE), 3, 6)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:6]
### basic settings
par(mfrow = c(3, 2))
par(mar = c(1, 1, 1, 1))
chordDiagram(mat)
library(circlize)
set.seed(123)
mat = matrix(sample(1:100, 18, replace = TRUE), 3, 6)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:6]
### basic settings
par(mfrow = c(3, 2))
par(mar = c(1, 1, 1, 1))
chordDiagram(mat)
head(mat)
set.seed(123)
mat = matrix(sample(1:100, 18, replace = TRUE), 3, 6)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:6]
### basic settings
par(mfrow = c(3, 2))
par(mar = c(1, 1, 1, 1))
chordDiagram(mat)
q()
library(SHELF)
v<-c(40,60)
p<-c(0.33, 0.66)
myfit<-fitdist(vals=v, probs=p, tdf=1)
plotfit(myfit, d="t")
feedback(myfit)
feedback(myfit, quantiles=c(0.01,0.99))
library(SHELF)
v <- matrix(c(20,30,50,55,60,70),3,2)
p <- c(0.25,0.5,0.75)
myfit<-fitdist(vals=v, probs=p, lower=0, upper = 100)
plotfit(myfit, xl =0, xu=100, d = "beta", lp = T, int = T)
v2 <- c(20, 30 , 50)
myfit2 <-fitdist(vals=v2, probs=p, lower=0, upper = 100)
plotfit(myfit2, int = T)
elicit()
library(SHELF)
elicit()
v2 <- c(20, 30 , 50)
myfit2 <-fitdist(vals=v2, probs=p, lower=0, upper = 100)
plotfit(myfit2, int = T)
library(SHELF)
elicit()
plotfit(myfit2, int = T)
elicit()
elicit()
library(SHELF)
elicit()
library(SHELF)
elicit()
library(SHELF)
elicit()
elicit()
elicit()
plotfit(myfit2, int = T)
library(SHELF)
elicit()
expect_equal
library(testthat)
m <- 10
s <- 20
vals <- c(m - s, m , m + 2 * s)
myfit <- fitdist(vals, pnorm(vals, m, s ))
norm.parameters <- unlist(myfit$Normal)
norm.parameters
best.name <- unlist(myfit$best.fitting)
best.name
attributes(best.name) <- attributes(norm.parameters) <- NULL
expect_equal(norm.parameters, c(m, s))
expect_equal(best.name, 1)
best.name
expect_equal(best.name, 2)
q
expect_equal(norm.parameters, c(m, s))
expect_equal(norm.parameters, c(m, s+1))
expect_equal(norm.parameters, c(m+1, s))
100*qbeta(c(0.33, 0.5, 0.66))
100*qbeta(c(0.33, 0.5, 0.66), 10, 5)
100*qbeta(c(0.33, 0.5, 0.66), 15, 5)
100*qbeta(c(0.33, 0.5, 0.66), 25, 5)
100*qbeta(c(0.33, 0.5, 0.66), 5, 25)
100*qbeta(c(0.33, 0.5, 0.66), 5, 35)
100*qbeta(c(0.33, 0.5, 0.66), 35, 55)
100*qbeta(c(0.33, 0.5, 0.66), 35, 5)
elicit()
100*qbeta(c(0.33, 0.5, 0.66), 2.2, 5.5)
100*qbeta(c(0.33, 0.5, 0.66), 2.2, 5.5)
100*qbeta(c(0.33, 0.5, 0.66), 5, 20)
a <- 5
b <- 20
vals <- c(16, 19, 23)
myfit <- fitdist(vals, pbeta(vals, a, b ))
myfit <- fitdist(vals, pbeta(vals/100, a, b ), lower = 0, upper = 100)
beta.parameters <- unlist(myfit$Beta)
best.name <- unlist(myfit$best.fitting)
best.name
attributes(best.name) <- attributes(beta.parameters) <- NULL
expect_equal(beta.parameters, c(a, b))
beta.parameters
?expect_equal
expect_equal(beta.parameters, c(a, b), tolerance = 0.001)
best.name
attributes(best.name) <- attributes(beta.parameters) <- NULL
best.name <- unlist(myfit$best.fitting)
myfit$best.fitting
best.name <- unlist(myfit$best.fitting)
beta.name
best.name
as.character(best.name)
best.name <- as.character(unlist(myfit$best.fitting))
expect_equal(best.name, "Beta")
m <- 10
s <- 20
vals <- c(m - s, m , m + 2 * s)
myfit <- fitdist(vals, pnorm(vals, m, s ))
feedback(myfit, quantiles=c(0.05, 0.95), values = c(m -0.5*s, m+s))
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(m -0.5*s, m+s))
fb$fitted.quantiles[,1]
qnorm(c(0.05, 0.95), m, s)
signif(qnorm(c(0.05, 0.95), m, s),3)
expect_equal(fb$fitted.quantiles[, 1],
signif(qnorm(c(0.05, 0.95), m, s),3))
expect_equal(fb$fitted.probabilities[, 1],
signif(pnorm(c(m -0.5*s, m+s), m, s),3))
myfit <- fitdist(vals, pbeta(vals/100, a, b ), lower = 0, upper = 100)
a <- 5
b <- 20
vals <- c(16, 19, 23)
myfit <- fitdist(vals, pbeta(vals/100, a, b ), lower = 0, upper = 100)
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(18, 25))
fb
expect_equal(fb$fitted.quantiles[, 6],
signif(qbeta(c(0.05, 0.95), a, b),3))
expect_equal(fb$fitted.quantiles[, 6],
signif(100 * qbeta(c(0.05, 0.95), a, b),3))
expect_equal(fb$fitted.probabilities[, 6],
signif(pbeta(c(18, 25)/100, a, b),3))
fb$fitted.probabilities[, 6]
signif(pbeta(c(18, 25)/100, a, b),3)
a <- 5
b <- 20
l <- 10
u <- 60
vals <- c(18, 20, 24)
myfit <- fitdist(vals, pbeta((vals-l/(u-l)), a, b ), lower = l, upper = u)
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(19, 29))
beta.parameters <- unlist(myfit$Beta)
best.name <- as.character(unlist(myfit$best.fitting))
attributes(beta.parameters) <- NULL
pbeta((vals-l/(u-l))
pbeta((vals-l/(u-l)), a, b )
myfit <- fitdist(vals, pbeta((vals-l)/(u-l), a, b ), lower = l, upper = u)
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(19, 29))
beta.parameters <- unlist(myfit$Beta)
best.name <- as.character(unlist(myfit$best.fitting))
attributes(beta.parameters) <- NULL
expect_equal(beta.parameters, c(a, b), tolerance = 0.001)
beta.parameters
expect_equal(best.name, "Beta")
expect_equal(fb$fitted.quantiles[, 6],
signif(l + (u-l) * qbeta(c(0.05, 0.95), a, b),3))
expect_equal(fb$fitted.probabilities[, 6],
signif(pbeta((c(19, 29)-l/(u-l)), a, b),3))
expect_equal(fb$fitted.probabilities[, 6],
signif(pbeta((c(19, 29)-l)/(u-l), a, b),3))
fb
signif(l + (u-l) * qbeta(c(0.05, 0.95), a, b),3)
signif(pbeta((c(19, 29)-l)/(u-l), a, b),3)
?skip_on_cran
qgamma(c(0.25, 0.5 ,0.75), 5, 5)
qgamma(c(0.25, 0.5 ,0.75), 15, 5)
qgamma(c(0.25, 0.5 ,0.75), 55, 5)
qgamma(c(0.25, 0.5 ,0.75), 55, 3)
qgamma(c(0.25, 0.5 ,0.75), 50, 2)
qgamma(c(0.25, 0.5 ,0.75), 50, 2) + 10
a <- 50
b <- 2
l <- 10
a <- 50
b <- 2
l <- 10
vals <- c(32, 35, 37)
myfit <- fitdist(vals, pgamma(vals-l, a, b ), lower = l, upper)
myfit <- fitdist(vals, pgamma(vals-l, a, b ), lower = l)
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(33, 40))
myfit
a <- 50
b <- 2
l <- 10
vals <- c(32, 35, 37)
myfit <- fitdist(vals, pgamma(vals-l, a, b ), lower = l)
fb <- feedback(myfit, quantiles=c(0.05, 0.95), values = c(33, 40))
gamma.parameters <- unlist(myfit$Gamma)
best.name <- as.character(unlist(myfit$best.fitting))
attributes(gamma.parameters) <- NULL
expect_equal(gamma.parameters, c(a, b), tolerance = 0.001)
gamma.parameters
expect_equal(best.name, "Gamma")
expect_equal(best.name, "Beta")
expect_equal(gamma.parameters, c(a, b), tolerance = 0.001)
expect_equal(best.name, "Gamma")
expect_equal(fb$fitted.quantiles[, 6],
signif(l + qgamma(c(0.05, 0.95), a, b),3))
expect_equal(fb$fitted.probabilities[, 6],
signif(pgamma(c(33, 40)-l, a, b),3))
fb
expect_equal(fb$fitted.quantiles[, 3],
signif(l + qgamma(c(0.05, 0.95), a, b),3))
expect_equal(fb$fitted.probabilities[, 3],
signif(pgamma(c(33, 40)-l, a, b),3))
?fitdist
