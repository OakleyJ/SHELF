{
    "collab_server" : "",
    "contents" : "shinyplotsingle<- function(fit, xl, xu, ql, qu, ex){\n  \n  plotlimits <- paste(xl, xu , sep = \",\")\n  \n  # Determine set of suitable distributions\n  if(fit$limits[ex, 1]>=0 & fit$limits[ex, 2] < Inf){\n    distributionchoices <- list(\"Histogram\" = 1, \"Normal\" = 2, \"Student t\" = 3, \"Gamma\" = 4, \"log normal\" = 5, \"Log Student t\" = 6, \"Beta\" = 7, \"Best fitting\" =8)\n  }\n  if(fit$limits[ex, 1]>=0 & fit$limits[ex, 2] == Inf){\n    distributionchoices <- list(\"Histogram\" = 1, \"Normal\" = 2, \"Student t\" = 3, \"Gamma\" = 4, \"log normal\" = 5, \"Log Student t\" = 6, \"Best fitting\" =8)\n  }\n  if(fit$limits[ex, 1]==-Inf & fit$limits[ex, 2] == Inf){\n    distributionchoices <- list(\"Histogram\" = 1, \"Normal\" = 2, \"Student t\" = 3, \"Best fitting\" =8)\n  }\n  if(fit$limits[ex, 1]>-Inf & fit$limits[ex, 1] < 0 & fit$limits[ex, 2] < Inf){\n    distributionchoices <- list(\"Histogram\" = 1, \"Normal\" = 2, \"Student t\" = 3, \"Beta\" = 7, \"Best fitting\" =8)\n  }\n  \n  if(is.na(ql) == TRUE){ql <- 0.05}\n  if(is.na(qu) == TRUE){qu <- 0.95}\n  \n\n  ###\n  \n  runApp(list(\n  ui = shinyUI(fluidPage(\n    \n    # Application title\n    titlePanel(\"Feedback\"),\n    \n    sidebarLayout(\n      sidebarPanel(\n        textInput(\"xlimits\", label = h5(\"x-axis limits\"), value = plotlimits),\n        radioButtons(\"radio\", label = h5(\"Distribution\"), choices = distributionchoices, selected = 1 ),\n        numericInput(\"fq1\", label = h5(\"lower feedback quantile\"), value = ql, min=0, max=1),\n        numericInput(\"fq2\", label = h5(\"upper feedback quantile\"), value = qu ,min=0, max=1)\n      ),\n            mainPanel(\n        plotOutput(\"distPlot\"),\n        \n          tableOutput(\"values\")\n        \n      )\n    )\n  )),\n   \n  server = function(input, output) {\n    \n    \n    output$distPlot <- renderPlot({\n      xlimits<-eval(parse(text=paste(\"c(\",input$xlimits,\")\")))\n      dist<-c(\"hist\",\"normal\", \"t\", \"gamma\", \"lognormal\", \"logt\",\"beta\", \"best\")\n      #print(drawdensity(fit, d=dist[as.numeric(input$radio)], \n      #                  ql=input$fq1, \n      #                  qu=input$fq2, \n      #                  xl=xlimits[1], \n      #                  xu=xlimits[2], \n      #                  ex=ex))\n      print(makeSingleExpertPlot(fit, d=dist[as.numeric(input$radio)], \n                        ql=input$fq1, \n                        qu=input$fq2, \n                        pl=xlimits[1], \n                        pu=xlimits[2], \n                        ex=ex))\n    })\n    \n    ssq <- fit$ssq[1, is.na(fit$ssq[1,])==F]\n    best.index <- which(ssq == min(ssq))[1]\n    \n    \n    quantileValues <- reactive({\n      xlimits<-eval(parse(text=paste(\"c(\",input$xlimits,\")\")))\n      pl<-xlimits[1]\n      pu<-xlimits[2]\n      if(as.numeric(input$radio)==8){index<-best.index}else{index<-as.numeric(input$radio) - 1}\n      if(as.numeric(input$radio)==1){\n        if(pl == -Inf & fit$limits[ex,1] > -Inf){pl <- fit$limits[ex,1]}\n        if(pu == Inf & fit$limits[ex,2] < Inf){pu <- fit$limits[ex,2] }\n        if(pl == -Inf & fit$limits[ex,1] == -Inf){pl <- qnorm(0.001, fit$Normal[ex,1], fit$Normal[ex,2])}\n        if(pu == Inf & fit$limits[ex,2] == Inf){pu <- qnorm(0.999, fit$Normal[ex,1], fit$Normal[ex,2])}\n        p <- c(0, fit$probs[ex,], 1)\n        x <- c(pl, fit$vals[ex,], pu)\n        values <- qhist(c(input$fq1,input$fq2), x, p)\n      }\n      \n      if(as.numeric(input$radio)>1){\n        temp<-feedback(fit, quantiles=c(input$fq1,input$fq2), ex=ex)\n        values=temp$fitted.quantiles[,index]\n      }\n      data.frame(quantiles=c(input$fq1,input$fq2), values=values)\n        \n    }) \n    \n    output$values <- renderTable({\n      quantileValues()\n    })\n    \n}\n))\n}\n",
    "created" : 1474452848903.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2932188405",
    "id" : "F235591E",
    "lastKnownWriteTime" : 1468252505,
    "last_content_update" : 1468252505,
    "path" : "~/Dropbox/Research/R packages/SHELF/SHELF1.2.0.9001/R/shinyplotsingle.R",
    "project_path" : "R/shinyplotsingle.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}