{
    "collab_server" : "",
    "contents" : "#' Fit a Dirichlet distribution to elicited marginal distributions for proportions \n#' \n#' Takes elicited beta distributions for a set of proportions as inputs,\n#' and fits a Dirichlet distribution. The beta parameters are adjusted \n#' so that the expectations sum to 1, and then the sum of the Dirichlet\n#' parameters is chosen based on the sums of the beta parameters for each elicited marginal \n#' \n#' \n#' \n#' @param ... A list of elicitation fits produced from the \\code{fitdist}\n#' command, one per marginal proportion, separated by commas.\n#' @param categories A vector of strings labelling the marginal proportions.\n#' @param n.fitted The method used to determine the sum of the Dirichlet parameters.\n#' Use \\code{\"opt\"} for best fitting, derived by matching standard deviations from the elicited marginals\n#' and the fitted Dirichlet; \\code{\"min\"} for a conservative choice based \n#' on the smallest equivalent sample size (sum of the beta parameters) from the \n#' elicited marginals; \\code{\"med\"} for the mean of the smallest and largest largest equivalent sample size\n#' from the \n#' elicited marginals; \\code{\"mean\"} for the mean of all the equivalent sample sizes\n#' from the \n#' elicited marginals.\n#' @param plotBeta logical. Plot the original elicited marginals and the fitted marginals from the \n#' Dirichlet fit. \n#\n\n#' @return The parameters of the fitted Dirichlet distribution.\n#' \n#' @references Zapata-Vazquez, R., O'Hagan, A. and Bastos, L. S. (2014). Eliciting expert judgements about a set of proportions. Journal of Applied Statistics 41, 1919-1933.\n#' \n#' @author Jeremy Oakley <j.oakley@@sheffield.ac.uk>\n#' @examples\n#' \\dontrun{\n#' p1 <- c(0.25, 0.5, 0.75)\n#' v1 <- c(0.5, 0.55, 0.6)\n#' v2 <- c(0.22, 0.3, 0.35)\n#' v3 <- c(0.11, 0.15, 0.2)\n#' myfit1 <- fitdist(v1, p1, 0, 1)\n#' myfit2 <- fitdist(v2, p1, 0, 1)\n#' myfit3 <- fitdist(v3, p1, 0, 1)\n#' d <- fitDirichlet(myfit1, myfit2, myfit3,\n#'                   categories = c(\"A\",\"B\",\"C\"),\n#'                   n.fitted = \"opt\")\n#' }\n#' @import ggplot2\n#' @importFrom tidyr gather\n#' @export\n#' \n#'\n\n\nfitDirichlet <- function(...,\n                         categories = NULL,\n                         n.fitted = \"opt\",\n                         plotBeta = TRUE) {\n  \n  beta.fits <- list(...)\n  \n  numCategories <- length(beta.fits)\n  if (is.null(categories)) {\n    categories <- paste(\"Category\", 1:numCategories, sep = \" \")\n  }\n  \n  beta.parameters <-\n    sapply(beta.fits, function(x)\n      c(x$Beta[[1]], x$Beta[[2]]))\n  \n  # Adjust beta.parameters so that expected values of the\n  # marginal proportions sum to 1.\n  beta.means <- beta.parameters[1,] / colSums(beta.parameters)\n  r <- sum(beta.means)\n  adj.beta.parameters <- beta.parameters /r\n  adj.beta.parameters[2, ] <- colSums(beta.parameters) - \n    adj.beta.parameters[1, ]\n  \n  # Get the dirichlet parameter n.d = \\sum d_i\n  n <- colSums(beta.parameters)\n  v <- beta.parameters[1,] * (n - beta.parameters[1,]) /\n    (n ^ 2 * (n + 1))\n  n.d <- switch(\n    n.fitted,\n    min = min(n),\n    mean = mean(n),\n    med = mean(range(n)),\n    opt = (sum(v * (n + 1)) / (sum(v * (\n      n + 1\n    ) ^ 0.5))) ^ 2 - 1\n  )\n  dirichlet.parameters <- n.d * adj.beta.parameters[1,] /\n    colSums(adj.beta.parameters)\n  names(dirichlet.parameters) <- categories\n  \n  # Plot original elicited marginal distributions\n  # together with fitted marginal distributions from the Dirichlet\n  if (plotBeta) {\n    getbetadensity <- function(x) {\n      dbeta((0:100) / 100, x[1], x[2])\n    }\n    \n    df1 <- data.frame((0:100) / 100,\n                      sapply(data.frame(beta.parameters),\n                             getbetadensity))\n    \n    names(df1) <- c(\"x\", categories)\n    df1 <- tidyr::gather(df1,\n                         key = Category,\n                         value = fx,-x,\n                         factor_key = TRUE)\n    df1 <- data.frame(df1, parameters = \"original\")\n   \n    marginal.parameters <- rbind(dirichlet.parameters,\n                                 n.d - dirichlet.parameters)\n    \n    df2 <- data.frame((0:100) / 100,\n                      sapply(data.frame(marginal.parameters), getbetadensity))\n    \n    names(df2) <- c(\"x\", categories)\n    df2 <- tidyr::gather(df2,\n                         key = Category,\n                         value = fx,-x,\n                         factor_key = TRUE)\n    df2 <- data.frame(df2, parameters = \"dirichlet fit\")\n    \n    df.all <- rbind(df1, df2)\n    \n    p1 <- ggplot(df.all, aes(x = x, y = fx)) +\n      geom_line(aes(colour = parameters)) +\n      facet_wrap(~ Category, ncol = 1) +\n      labs(colour = \" Marginal \\n distributions\") +\n      ylab(expression(f[X](x)))\n    print(p1)\n  }\n  \n  # diagnostics\n  \n  elic.marginal <- data.frame(beta.parameters)\n  elic.marginal <- rbind(elic.marginal,\n                         beta.means, \n                         v^0.5,\n                         colSums(beta.parameters))\n  names(elic.marginal) <- categories\n  row.names(elic.marginal) <- c(\"shape1\", \"shape2\", \"mean\", \"sd\",  \"sum\")\n  cat(\"\\nDirectly elicted beta marginal distributions:\\n \\n\" )\n  print(signif(elic.marginal, 3))\n  \n  cat(\"\\nSum of elicited marginal means:\",  \n      round(sum(beta.means), 3) )\n  \n  fitted.marginal <- data.frame(matrix(c(dirichlet.parameters,\n                                         n.d - dirichlet.parameters,\n                                      dirichlet.parameters / n.d,\n                                      (dirichlet.parameters * (n.d - dirichlet.parameters) /\n                                        (n.d ^ 2 * (n.d + 1)))^0.5, \n                                      rep(n.d, numCategories)),\n                                      ncol=numCategories, byrow=T))\n  names(fitted.marginal) <- categories\n  row.names(fitted.marginal) <- c(\"shape1\", \"shape2\",\"mean\", \"sd\", \"sum\")\n  \n  cat(\"\\n \\nBeta marginal distributions from Dirichlet fit:\\n \\n\" )\n  print(signif(fitted.marginal, 3))\n \n  dirichlet.parameters\n}\n\n\n\n#' Calculate quantiles for the marginal distributions of a Dirichlet distribution \n#' \n#' Given a (elicited) Dirichlet distribution, calculate quantiles for each marginal\n#' beta distribution corresponding to the elicited quantiles\n#' \n#' \n#' @param d A vector of parameters of the Dirichlet distribution\n#' @param quantiles The desired quantiles for feedback\n#' @param sf The number of significant figures displayed\n#\n\n#' @return Quantiles for each marginal distribution\n#' #' \n#' @author Jeremy Oakley <j.oakley@@sheffield.ac.uk>\n#' @examples\n#' \\dontrun{\n#' feedbackDirichlet(d = c(20, 10, 5),\n#'                   quantiles = c(0.1, 0.33, 0.66, 0.9))\n#' }\n#' @export\n#' \n#'\n\n\n\nfeedbackDirichlet <- function(d, quantiles = c(0.1, 0.9), sf = 2) {\n  marginal.parameters <- rbind(d, sum(d) - d)\n  x <- sapply(data.frame(marginal.parameters),\n              function(x) {\n                qbeta(quantiles, x[1], x[2])\n              })\n  row.names(x) <- quantiles\n  signif(x, sf)\n}\n\n\n\n",
    "created" : 1465415998441.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2669930590",
    "id" : "D12858B0",
    "lastKnownWriteTime" : 1467214969,
    "last_content_update" : 1467214969,
    "path" : "~/Dropbox/Research/R packages/SHELF/SHELF1.2.0.9001/R/elicitDirichlet.R",
    "project_path" : "R/elicitDirichlet.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}