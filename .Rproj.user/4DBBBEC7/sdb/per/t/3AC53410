{
    "collab_server" : "",
    "contents" : "#' Elicit judgements and fit distributions interactively\n#' \n#' Opens up a web browser (using the shiny package), from which you can specify\n#' judgements, fit distributions and plot the fitted density functions with\n#' additional feedback.\n#' \n#' Parameter limits determine which distributions can be fitted. Non-negative\n#' lower limits are needed for the gamma, lognormal and log-t distributions,\n#' and both limits must be finite for to fit a beta distribution. If a\n#' histogram is fitted without specifying finite limits, endpoints are chosen\n#' based on fitting a normal distribution.\n#' \n#' As an example, if the elicited judgements are P(X<15)=0.25, P(X<20)=0.5) and\n#' P(X<40)=0.75, specify the parameter values as 15,20,40 and the cumulative\n#' probabilities as 0.25,0.5,0.75.\n#' \n#' Press Esc in the R console window to exit the elicitation session.\n#' \n#' @author Jeremy Oakley <j.oakley@@sheffield.ac.uk>\n#' @examples\n#' \n#' \\dontrun{\n#' \n#' elicit()\n#' \n#' }\n#' @import shiny\n#' @export\nelicit<- function(){\n  \n  runApp(list(\n  ui = shinyUI(fluidPage(\n    \n    # Application title\n    titlePanel(\"Elicitation\"),\n    \n    # Sidebar with a slider input for the number of bins\n    sidebarLayout(\n      sidebarPanel(\n        textInput(\"limits\", label = h5(\"Parameter limits\"), value = \"0, 100\"),\n        textInput(\"values\", label = h5(\"Parameter values\"), value = \"25, 50, 75\"),\n        textInput(\"probs\", label = h5(\"Cumulative probabilities\"), value = \"0.25, 0.5, 0.75\"),\n        radioButtons(\"radio\", label = h5(\"Distribution\"), choices = list(\"Histogram\" = 1, \"Normal\" = 2, \"Student t\" = 3, \"Gamma\" = 4, \"Log normal\" = 5, \"Log Student t\" = 6, \"Beta\" = 7, \"Best fitting\" =8), selected = 1 ),\n        numericInput(\"tdf\", label = h5(\"Student-t degrees of freedom\"), value = 3),\n        numericInput(\"fq1\", label = h5(\"lower feedback quantile\"), value = 0.05,min=0,max=1),\n        numericInput(\"fq2\", label = h5(\"upper feedback quantile\"), value = 0.95,min=0,max=1)\n      ),\n            mainPanel(\n        plotOutput(\"distPlot\"),\n        tableOutput(\"values\")\n      )\n    )\n  )),\n   \n  server = function(input, output) {\n    \n    output$distPlot <- renderPlot({\n      limits<-eval(parse(text=paste(\"c(\",input$limits,\")\")))\n      p<-eval(parse(text=paste(\"c(\",input$probs,\")\")))\n      v<-eval(parse(text=paste(\"c(\",input$values,\")\")))\n      myfit<-fitdist(vals=v, probs=p, lower=limits[1], upper=limits[2], tdf=input$tdf)\n      \n      dist<-c(\"hist\",\"normal\", \"t\", \"gamma\", \"lognormal\", \"logt\",\"beta\", \"best\")\n      suppressWarnings(plotfit(myfit, d=dist[as.numeric(input$radio)],\n                               int = F, ql=input$fq1, qu=input$fq2,\n                               xl = limits[1], xu = limits[2]))\n      \n    })\n    \n\n    quantileValues <- reactive({\n      \n      limits<-eval(parse(text=paste(\"c(\",input$limits,\")\")))\n      p<-eval(parse(text=paste(\"c(\",input$probs,\")\")))\n      v<-eval(parse(text=paste(\"c(\",input$values,\")\")))\n      fit<-fitdist(vals=v, probs=p, lower=limits[1], upper=limits[2], tdf=input$tdf)\n      \n      ssq <- fit$ssq[1, is.na(fit$ssq[1,])==F]\n      best.index <- which(ssq == min(ssq))[1]\n      \n      ex<-1\n      xlimits<-eval(parse(text=paste(\"c(\",input$limits,\")\")))\n      pl<-xlimits[1]\n      pu<-xlimits[2]\n      if(as.numeric(input$radio)==8){index<-best.index}else{index<-as.numeric(input$radio) - 1}\n      if(as.numeric(input$radio)==1){\n        if(pl == -Inf & fit$limits[ex,1] > -Inf){pl <- fit$limits[ex,1]}\n        if(pu == Inf & fit$limits[ex,2] < Inf){pu <- fit$limits[ex,2] }\n        if(pl == -Inf & fit$limits[ex,1] == -Inf){pl <- qnorm(0.001, fit$Normal[ex,1], fit$Normal[ex,2])}\n        if(pu == Inf & fit$limits[ex,2] == Inf){pu <- qnorm(0.999, fit$Normal[ex,1], fit$Normal[ex,2])}\n        p <- c(0, fit$probs[ex,], 1)\n        x <- c(pl, fit$vals[ex,], pu)\n        values <- qhist(c(input$fq1,input$fq2), x, p)\n      }\n      \n      if(as.numeric(input$radio)>1){\n        temp<-feedback(fit, quantiles=c(input$fq1,input$fq2), ex=1)\n        values=temp$fitted.quantiles[,index]\n      }\n      data.frame(quantiles=c(input$fq1,input$fq2), values=values)\n      \n    }) \n    \n    output$values <- renderTable({\n      quantileValues()\n    })\n    \n  }\n  ))\n}\n",
    "created" : 1474452869187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2845078594",
    "id" : "3AC53410",
    "lastKnownWriteTime" : 1474454381,
    "last_content_update" : 1474454381322,
    "path" : "~/Dropbox/Research/R packages/SHELF/SHELF1.2.0.9001/R/elicit.R",
    "project_path" : "R/elicit.R",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}